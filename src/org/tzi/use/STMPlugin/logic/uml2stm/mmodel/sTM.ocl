import 'sTM.ecore'

package sTM

context SnapshotClassifier::getNext() : SnapshotClassifier
	body: self.nextT.nextS
	
context SnapshotClassifier::getPost() : SnapshotClassifier
	body: Set{self.getNext()}->closure(getNext())->excluding(null)
	
context SnapshotClassifier::getPrevious() : SnapshotClassifier
	body: self.nextT.nextS
	
context SnapshotClassifier::getPre() : SnapshotClassifier
	body: Set{self.getNext()}->closure(getNext())->excluding(null)
	
--Resolve name-conflict with SnapshotClass/Classifier - SnapshotComponent	
context SnapshotComponent::getNext() : SnapshotComponent
	body: self.SnapshotClassifier.getNext().snapshotObjects->any(o | self.oclIsTypeOf(o.oclType()) and self.objectId = o.objectId)
	
context SnapshotComponent::getPost() : SnapshotComponent
	body: Set{self.getNext()}->closure(getNext())->excluding(null)
	
context SnapshotComponent::getPrevious() : SnapshotComponent
	body: self.SnapshotClassifier.getPrevious().snapshotObjects->any(o | self.oclIsTypeOf(o.oclType()) and self.objectId = o.objectId)
	
context SnapshotComponent::getPre() : SnapshotComponent
	body: Set{self.getNext()}->closure(getNext())->excluding(null)

context SnapshotClassifier
    inv UniqueIds: self.snapshotObjects->forAll(o1, o2 | o1.oclIsTypeOf(o2.oclType()) and o1.objectId = o2.objectId implies o1 = o2)
    inv AcyclicScenario: self.getPost()->excludes(self) and self.getPre()->excludes(self)
    inv SameSnapshot: SnapshotClassifier.allInstances()->forAll(s | (self.nextT = s.nextT and self.beforeT = s.beforeT))
    inv OneScenario: SnapshotClassifier.allInstances()->select(isFirst)->size() = 1 and SnapshotClassifier.allInstances()->select(isLast)->size() = 1
    inv FirstOrLast: self.beforeT.oclIsUndefined() implies self.isFirst and self.nextT.oclIsUndefined() implies self.isLast
	
context Association
	inv ValidLinking: self.memberEnd->collect(p | p.SnapshotComponent.SnapshotClassifier)->asSet()->size() = 1

context TransitionClass
    inv SameTrans: TransitionClass.allInstances()->forAll(t : TransitionClass | (self.nextS = t.nextS and self.beforeS = t.beforeS) implies self = t)
	
context Operation
	inv ExclusiveComp: not (self.postcondition.TransitionClass->notEmpty() or self.postcondition.SnapshotComponent->notEmpty()) and
						not (self.precondition.TransitionClass->notEmpty() or self.precondition.SnapshotComponent->notEmpty()) and
						not (self.bodyCondition.TransitionClass->notEmpty() or self.bodyCondition.SnapshotComponent->notEmpty())
						
context Constraint
	inv ExclusiveComp: not (self.SnapshotComponent->notEmpty() and self.TransitionClass->notEmpty())
	
endpackage