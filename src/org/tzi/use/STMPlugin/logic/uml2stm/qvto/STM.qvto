--modeltype Ecore 'strict' uses ecore('http://www.eclipse.org/emf/2002/Ecore');
modeltype UML 'strict' uses uml('http://www.eclipse.org/uml2/5.0.0/UML');
modeltype STM uses sTM('http://www.example.org/sTM');

transformation UML2STM(in source : UML, out target : STM);

property Snapshot = new STM::SnapshotClassifier("Snapshot", false, false);
property FirstSnapshot = new STM::SnapshotClassifier("FirstSnapshot", true, false);
property LastSnapshot = new STM::SnapshotClassifier("LastSnapshot", false, true);
property Transition_ = new STM::TransitionClass(true);

constructor STM::SnapshotClassifier::SnapshotClassifier(n : String, f : Boolean, l : Boolean) {
	name := n;
	isFirst := f;
	isLast := l;
	if (isFirst or isLast) {
		generalization := new STM::Generalization(Snapshot);
	}
}

constructor STM::Operation::Operation(n : String, t : STM::Type, l : Integer, u : Integer) {
	name := n;
	type := t;
	lower := l;
	upper := u;
}

constructor STM::Generalization::Generalization(g : STM::Classifier) {
	general := g;
}

constructor STM::Property::Property(n : String, k : STM::AggregationKind, t : STM::Type, l : Integer, u : Integer) {
	name := n;
	aggregation := k;
	type := t;
	upper := u;
	lower := l;
}

constructor STM::Association::Association(n : String, p1 : STM::Property, p2 : STM::Property) {
	name := n;
	memberEnd += p1;
	memberEnd += p2;
	ownedEnd += p1;
	ownedEnd += p2;
}

constructor STM::TransitionClass::TransitionClass(p : Boolean) {
	isParentClass := p;
	if (isParentClass = true) {
		name := "Transition";
		isAbstract := true;
	}
}

constructor STM::Constraint::Constraint(n : String, expBody : String) {
	name := n;
	specification.oclAsType(STM::OpaqueExpression).body := expBody;
	specification.oclAsType(STM::OpaqueExpression).language := "OCL".oclAsType(OrderedSet(String));
}

main() {
	source.rootObjects()[Model].map ClassModel2STM();
}

mapping UML::Model::ClassModel2STM() : STM::Model {
	name := self.name + "STM";
	ownedElements += Snapshot;
	ownedElements += FirstSnapshot;
	ownedElements += LastSnapshot;
	Snapshot.snapshotObjects += self.ownedElement[Class]
		->select(c | not c.oclIsTypeOf(AssociationClass))->map Class2SnapshotComponent();
	ownedElements += self.ownedElement[Association]
		->select(a | not a.oclIsTypeOf(AssociationClass))->map ClassAssociation2STMAssociation();
	Snapshot.snapshotObjects += self.ownedElement[AssociationClass]->map AssocClass2STMAssocClass();
	ownedElements += self.ownedElement[Enumeration]->map Enumeration2Enumeration();
	ownedElements += Transition_;
	ownedElements += Transition_.transitionSubClasses;
	ownedElements += STM::DataType.allInstances()->select(t | ownedElements->excludes(t));
	--ownedElements += STM::Association.allInstances()->select(a | not ownedElements->includes(a))
}

mapping Class::Class2SnapshotComponent() : SnapshotComponent{
	name := self.name;
	attributes := self.ownedAttribute[Property]->map ClassProperty2STMProperty();
	constraints += self.ownedRule->map Constraint2Constraint();
	queryOperations += self.ownedOperation->select(o | o.isQuery = true)->map QueryOperation2Operation();
	Transition_.transitionSubClasses += self.ownedOperation->select(o | o.isQuery = false)->map Operation2TransitionSubclass();
	generalization += self.generalization->map Generalization2Generalization();
	isAbstract := self.isAbstract;
	--var classProp := new STM::Property("snapshot", STM::AggregationKind::composite, Snapshot, 1, 1);
	--var snapProp := new STM::Property(name, STM::AggregationKind::composite, Snapshot, 1, -1);
	--new STM::Association("Snapshot" + name, classProp, snapProp);
}

mapping UML::AssociationClass::AssocClass2STMAssocClass() : STM::SnapshotAssocClass {
	name := self.name;
	attributes := self.ownedAttribute[Property]->map ClassProperty2STMProperty();
	constraints += self.ownedRule->map Constraint2Constraint();
	queryOperations += self.ownedOperation->select(o | o.isQuery = true)->map QueryOperation2Operation();
	Transition_.transitionSubClasses += self.ownedOperation->select(o | o.isQuery = false)->map Operation2TransitionSubclass();
	generalization += self.generalization->map Generalization2Generalization();
	isAbstract := self.isAbstract;
	ownedEnd += self.ownedEnd->map ClassProperty2STMProperty();
	memberEnd += self.memberEnd->map ClassProperty2STMProperty();
	--var classProp := new STM::Property("snapshot", STM::AggregationKind::composite, Snapshot, 1, 1);
	--var snapProp := new STM::Property(name, STM::AggregationKind::composite, Snapshot, 1, -1);
	--new STM::Association("Snapshot" + name, classProp, snapProp);
}


mapping Property::ClassProperty2STMProperty() : STM::Property {
	lower := self.lower;
	upper := self.upper;
	name := self.name;
	isDerived := self.isDerived;
	redefinedProperty += self.redefinedProperty->map ClassProperty2STMProperty();
	if (self.type.oclIsTypeOf(Class)) {
		type := self.type.oclAsType(Class).map Class2SnapshotComponent();
	}
	elif (self.type.oclIsTypeOf(AssociationClass)) {
		type := self.type.oclAsType(AssociationClass).map AssocClass2STMAssocClass();
	}
	elif (self.type.oclIsTypeOf(Enumeration)) {
		type := self.type.oclAsType(Enumeration).map Enumeration2Enumeration();
	}
	else {
		type := self.type.map Type2Type();
	};
	if (self.association.oclIsTypeOf(AssociationClass)) {
		association := self.association.oclAsType(AssociationClass).map AssocClass2STMAssocClass();
	}
	else {
		association := self.association.map ClassAssociation2STMAssociation();
	};
}

mapping UML::Type::Type2Type() : STM::DataType {
	name := self.name;
}

mapping Enumeration::Enumeration2Enumeration() : STM::Enumeration {
	name := self.name;
	enumerationLiteral := self.ownedLiteral->map Literal2Literal();
	ownedLiteral := self.ownedLiteral->map Literal2Literal();
}

mapping EnumerationLiteral::Literal2Literal() : STM::EnumerationLiteral{
	name := self.name;
}

mapping Association::ClassAssociation2STMAssociation() : STM::Association {
	name := self.name;
	ownedEnd += self.ownedEnd->map ClassProperty2STMProperty();
	memberEnd += self.memberEnd->map ClassProperty2STMProperty();
}

mapping Operation::Operation2TransitionSubclass() : STM::TransitionClass {
	name := self.owner.oclAsType(Class).name + "_" + self.name;
	generalization := new STM::Generalization(Transition_);
	attributes := self.ownedParameter->map Parameter2Property();
	context := new STM::Property("transitionContext", STM::AggregationKind::none, self._class.map Class2SnapshotComponent(), 0, 1);
	constraints += self.precondition->PreCondition2Constraint(context);
	constraints += self.postcondition->PostCondition2Constraint(context, postObjects->any(true));
}

mapping UML::Constraint::PreCondition2Constraint(preObj : STM::Property) : STM::Constraint {
	name := self.name;
	specification := self.specification.map VSPre2Spec(preObj);	
}

mapping UML::Constraint::PostCondition2Constraint(preObj : STM::Property, postObj : STM::Property) : STM::Constraint {
	name := self.name;
	specification := self.specification.map VSPost2Spec(preObj,postObj);
}

mapping UML::ValueSpecification::VSPre2Spec(preObj : STM::Property) : STM::OpaqueExpression {
	name := self.name;
	language := "OCL";
	var selfReplacer:String := "self." + preObj.name;
	var _body:String := self.stringValue();
	var temp:String :=  _body.replace("self", selfReplacer);
	body := temp.replace("result","ret");
	type := self.type.map Type2Type();
}

mapping UML::ValueSpecification::VSPost2Spec(preObj : STM::Property, postObj : STM::Property) : STM::OpaqueExpression {
	name := self.name;
	language := "OCL";
	var selfReplacer:String := "self." + preObj.name + ".getNext()";
	var _body :String := self.stringValue();
	var temp:String :=  _body.replace("self", selfReplacer);
	body := temp.replace("@pre","self."+preObj.name);
	type := self.type.map Type2Type();
}

mapping Operation::QueryOperation2Operation() : STM::Operation {
	name := self.name;
	upper := self.upper;
	lower := self.lower;
	type := self.type.map Type2Type();
	parameters += self.ownedParameter->map Parameter2Parameter();
	precondition := self.precondition->map Constraint2Constraint();
	postcondition := self.postcondition->map Constraint2Constraint();
	bodyCondition := self.bodyCondition.map Constraint2Constraint();
}

mapping Parameter::Parameter2Property() : STM::Property {
    name := self.name;
    if (self.type.oclIsKindOf(Class)) {
		type := self.type.oclAsType(Class).map Class2SnapshotComponent();
	}
	elif (self.type.oclIsTypeOf(AssociationClass)) {
		type := self.type.oclAsType(AssociationClass).map AssocClass2STMAssocClass();
	}
	elif (self.type.oclIsTypeOf(Enumeration)) {
		type := self.type.oclAsType(Enumeration).map Enumeration2Enumeration();
	}
	else {
		type := self.type.map Type2Type();
	};
	lower := self.lower;
	upper := self.upper;
}

mapping Parameter::Parameter2Parameter() : STM::Parameter {
	name := self.name;
	if (self.type.oclIsKindOf(Class)) {
		type := self.type.oclAsType(Class).map Class2SnapshotComponent();
	}
	elif (self.type.oclIsTypeOf(AssociationClass)) {
		type := self.type.oclAsType(AssociationClass).map AssocClass2STMAssocClass();
	}
	elif (self.type.oclIsTypeOf(Enumeration)) {
		type := self.type.oclAsType(Enumeration).map Enumeration2Enumeration();
	}
	else {
		type := self.type.map Type2Type();
	};
	direction := self.direction.toString();
	--_default := self._default.oclAsType(OrderedSet(String));
}

mapping Constraint::Constraint2Constraint() : STM::Constraint {
	name := self.name;
	specification := self.specification.oclAsType(OpaqueExpression).map Expression2STMOpaqueExpression();
}

mapping OpaqueExpression::Expression2STMOpaqueExpression() : STM::OpaqueExpression {
	body := self.body;
	language := self.language;
}

mapping Generalization::Generalization2Generalization() : STM::Generalization {
	general := self.general.oclAsType(Class).map Class2SnapshotComponent();
}