model SteamBoilerSTM

class Snapshot
end

class SteamBoiler
attributes
ready : Boolean
capacity : Real
minimalNormal : Real
maximalNormal : Real
maximumIncrease : Real
maximumDecrease : Real
minimalLimit : Real
maximalLimit : Real
valveOpen : valveState
end

class ControlProgram
attributes
mode : Mode
ready : Boolean
failureDetected : Boolean
wlmdFailure : Boolean
smdFailure : Boolean
pumpFailer : Boolean
pumpControllerFailure : Boolean
end

class PumpController
attributes
ready : Boolean
circulating : Boolean
end

class WaterLevelMeasurementDevice
attributes
ready : Boolean
waterLevel : Real
operations
getLevel() : Real
end

class Pump
attributes
ready : Boolean
capacity : Real
mode : valveState
end

class SteamMeasurementDevice
attributes
ready : Boolean
evaporationRate : Real
operations
getSteam() : Real
end

class FirstSnapshot < Snapshot
end

class LastSnapshot < Snapshot
end

association ControlProgramSMD between
ControlProgram[1..1] role program
SteamMeasurementDevice[1..1] role smd
end
association SteamBoilerWLMD between
SteamBoiler[1..1] role sb
WaterLevelMeasurementDevice[1..1] role wlmd
end
association SteamBoilerSMD between
SteamBoiler[1..1] role sb
SteamMeasurementDevice[1..1] role smd
end
association PumpControllerPump between
PumpController[1..1] role controller
Pump[1..1] role pump
end
association ControlProgramWLMD between
ControlProgram[1..1] role program
WaterLevelMeasurementDevice[1..1] role wlmd
end
association ControlProgramPumpController between
ControlProgram[1..1] role program
PumpController[1..1] role PC
end
association SteamBoilerControlProgram between
SteamBoiler[1..1] role sb
ControlProgram[1..1] role program
end
association SteamBoilerPump between
SteamBoiler[1..1] role sb
Pump[1..1] role pump
end
association ControlProgramPump between
ControlProgram[1..1] role program
Pump[1..1] role pump
end
enum valveState {open, #closed}

enum State {on, off}

enum Mode {Normal, Initialization, Degraded, Rescue, EmergencyStop}

abstract class Transition
end

class ControlProgram_StartOperation < Transition
attributes
transitionContext : ControlProgram
end

class PumpController_OpenPump < Transition
attributes
transitionContext : PumpController
end

class PumpController_ClosePump < Transition
attributes
transitionContext : PumpController
end

class SteamBoiler_OpenValve < Transition
attributes
transitionContext : SteamBoiler
end

class WaterLevelMeasurementDevice_addWater < Transition
attributes
amount : Real
transitionContext : WaterLevelMeasurementDevice
end


constraints
context SteamBoiler
inv openMeansInitialized: self.valveOpen=#open implies self.program.mode=#Initialization


context WaterLevelMeasurementDevice
inv appropriateWaterLevel: self.waterLevel < self.sb.capacity

context WaterLevelMeasurementDevice::getLevel() : Real
post post1: self.waterLevel >= 0
pre pre1: not self.oclIsUndefined()


context PumpController_OpenPump
inv pre1: self.transitionContext.pump.mode = closed

context PumpController_OpenPump
inv post1: self.transitionContext.getNext().pump.mode = #on


